Staybook API Documentation
Introduction
Staybook API provides CRUD operations for managing hotel documents. It allows users to create, read, update, and delete hotel information stored in Firebase Firestore. Additionally, users can apply query parameters to retrieve hotel documents with specific limits for images, amenities, and nearby places.

Installation
To use the Staybook API, follow these steps:

Clone the repository from GitHub:
bash

git clone <repository_url>
Navigate to the project directory:
bash

cd staybook-api
Install the dependencies:
bash

npm install
Set up Firebase Firestore by creating a new project on the Firebase console and downloading the service account key file (firebaseConfig.json).
Place the firebaseConfig.json file in the database directory of the project.
Start the server:
bash

npm start
The server should now be running locally on port 8080.
Base URL
The base URL for the Staybook API is http://localhost:8080/api/v1/hotels.


1. Create a Hotel Document
URL: /hotels
Method: POST
Description: Creates a new hotel document with the provided details.
Request Body:
{
  "hotelName": "Example Hotel",
  "hotelEmailId": "example@example.com",
  "hotelContactNumber": 1234567890,
  "hotelAddress": "123 Example St",
  "hotelCity": "Example City",
  "hotelState": "Example State",
  "hotelPincode": "123456",
  "hotelStarRating": 4,
  "hotelImageUrl": "https://example.com/hotel-image.jpg",
  "hotelImages": [
    "https://example.com/image1.jpg",
    "https://example.com/image2.jpg"
  ],
  "hotelAmenities": ["Pool", "Gym", "Spa"],
  "nearbyPlaces": ["Beach", "Shopping Mall"]
}
Responses:
{
  "status": "OK",
  "data": {
    "id": "documentId",
    "message": "Hotel document created successfully"
  }
}

2. Get All Hotel Documents
URL: /hotels
Method: GET
Description: Retrieves all hotel documents with optional query parameters for image limit, amenity limit, and nearby places limit.
Query Parameters:
imageLimit: Limit the number of images per hotel.
amenityLimit: Limit the number of amenities per hotel.
nearbyPlacesLimit: Limit the number of nearby places per hotel.
Response:
{
  "status": "OK",
  "data": [
    {
      "hotelName": "Example Hotel",
      "hotelEmailId": "example@example.com",
      "hotelContactNumber": 1234567890,
      "hotelAddress": "123 Example St",
      "hotelCity": "Example City",
      "hotelState": "Example State",
      "hotelPincode": "123456",
      "hotelStarRating": 4,
      "hotelImageUrl": "https://example.com/hotel-image.jpg",
      "hotelImages": ["https://example.com/image1.jpg"],
      "hotelAmenities": ["Pool", "Gym"],
      "nearbyPlaces": ["Beach"]
    },
    // More hotel documents...
  ]
}

Sure, here are the API endpoints with code in text format:

1. Create a Hotel Document
URL: /hotels
Method: POST
Description: Creates a new hotel document with the provided details.
Request Body:

json
Copy code
{
  "hotelName": "Example Hotel",
  "hotelEmailId": "example@example.com",
  "hotelContactNumber": 1234567890,
  "hotelAddress": "123 Example St",
  "hotelCity": "Example City",
  "hotelState": "Example State",
  "hotelPincode": "123456",
  "hotelStarRating": 4,
  "hotelImageUrl": "https://example.com/hotel-image.jpg",
  "hotelImages": [
    "https://example.com/image1.jpg",
    "https://example.com/image2.jpg"
  ],
  "hotelAmenities": ["Pool", "Gym", "Spa"],
  "nearbyPlaces": ["Beach", "Shopping Mall"]
}
Response:

json
Copy code
{
  "status": "OK",
  "data": {
    "id": "documentId",
    "message": "Hotel document created successfully"
  }
}
2. Get All Hotel Documents
URL: /hotels
Method: GET
Description: Retrieves all hotel documents with optional query parameters for image limit, amenity limit, and nearby places limit.
Query Parameters:
imageLimit: Limit the number of images per hotel.
amenityLimit: Limit the number of amenities per hotel.
nearbyPlacesLimit: Limit the number of nearby places per hotel.
Response:

json
Copy code
{
  "status": "OK",
  "data": [
    {
      "hotelName": "Example Hotel",
      "hotelEmailId": "example@example.com",
      "hotelContactNumber": 1234567890,
      "hotelAddress": "123 Example St",
      "hotelCity": "Example City",
      "hotelState": "Example State",
      "hotelPincode": "123456",
      "hotelStarRating": 4,
      "hotelImageUrl": "https://example.com/hotel-image.jpg",
      "hotelImages": ["https://example.com/image1.jpg"],
      "hotelAmenities": ["Pool", "Gym"],
      "nearbyPlaces": ["Beach"]
    },
    // More hotel documents...
  ]
}
3. Update a Hotel Document
URL: /hotels/:id
Method: PUT
Description: Updates an existing hotel document with the provided details.
Request Parameters:
id: ID of the hotel document to update.
Request Body:

{
  "hotelName": "Updated Hotel Name",
  // Other updated fields...
}
Response:
{
  "status": "OK",
  "message": "Hotel document updated successfully"
}
4. Delete a Hotel Document
URL: /hotels/:id
Method: DELETE
Description: Deletes an existing hotel document.
Request Parameters:
id: ID of the hotel document to delete.
Response:

json

{
  "status": "OK",
  "message": "Hotel document deleted successfully"
}
